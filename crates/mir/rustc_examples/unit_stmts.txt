fn main() {
    identity(1);
    
    1 + 2;
    
    identity(3 + 4);
}

fn identity(i: i32) -> i32 {
    i
}

=======================================================

// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (i32, bool);
    let _3: i32;
    let mut _4: i32;
    let mut _5: (i32, bool);

    bb0: {
        _1 = identity(const 1_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = CheckedAdd(const 1_i32, const 2_i32);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_i32, const 2_i32) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = CheckedAdd(const 3_i32, const 4_i32);
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", const 3_i32, const 4_i32) -> [success: bb3, unwind continue];
    }

    bb3: {
        _4 = move (_5.0: i32);
        _3 = identity(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn identity(_1: i32) -> i32 {
    debug i => _1;
    let mut _0: i32;

    bb0: {
        _0 = _1;
        return;
    }
}